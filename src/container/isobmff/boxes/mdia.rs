use crate::error::CustomError;
use crate::container::isobmff::BoxBuilder;
use crate::container::isobmff::boxes::mdhd::MDHDBuilder;
use crate::container::isobmff::boxes::hdlr::HDLRBuilder;
use crate::container::isobmff::boxes::minf::MINFBuilder;
use crate::container::remux;
use crate::util;

// MediaBox 14496-12; 8.4.1

pub struct MDIABuilder {
  mdhd_builder: Option<MDHDBuilder>,
  hdlr_builder: Option<HDLRBuilder>,
  minf_builder: Option<MINFBuilder>,
}

impl MDIABuilder {
  pub fn create_builder() -> MDIABuilder {
    MDIABuilder{
      mdhd_builder: None,
      hdlr_builder: None,
      minf_builder: None,
    }
  }

  pub fn mdhd(mut self, mdhd_builder: MDHDBuilder) -> MDIABuilder {
    self.mdhd_builder = Some(mdhd_builder);
    self
  }

  pub fn hdlr(mut self, hdlr_builder: HDLRBuilder) -> MDIABuilder {
    self.hdlr_builder = Some(hdlr_builder);
    self
  }

  pub fn minf(mut self, minf_builder: MINFBuilder) -> MDIABuilder {
    self.minf_builder = Some(minf_builder);
    self
  }

  pub fn build(&self) -> Result<Vec<u8>,CustomError> {
    let mdhd = self.mdhd_builder.as_ref()
      .ok_or_else(||remux::generate_error(String::from("Missing mdhd_builder for MDIABuilder")))?
      .build()?;

    let hdlr = self.hdlr_builder.as_ref()
      .ok_or_else(||remux::generate_error(String::from("Missing hdlr_builder for MDIABuilder")))?
      .build();

    let minf = self.minf_builder.as_ref()
      .ok_or_else(||remux::generate_error(String::from("Missing minf_builder for MDIABuilder")))?
      .build()?;
    
    let size = 
      8 + // header
      mdhd.len() +
      hdlr.len() +
      minf.len();
    let size_array = util::transform_usize_to_u8_array(size);

    Ok(
      [
        vec![
          // Size
          size_array[3], size_array[2], size_array[1], size_array[0],
          // mdia
          0x6D, 0x64, 0x69, 0x61,
        ],
        mdhd,
        hdlr,
        minf,
      ].concat()
    )
  }
}

#[cfg(test)]
mod tests {

  use super::*;
  use crate::container::isobmff::HandlerType;
  use crate::container::isobmff::boxes::vmhd::VMHDBuilder;
  use crate::container::isobmff::boxes::stbl::STBLBuilder;
  use crate::container::isobmff::boxes::stsd::STSDBuilder;

  #[test]
  fn test_build_mdia() {
    let expected_mdia: [u8; 255] = [
      // mdia
      0x00, 0x00, 0x00, 0xFF,
      0x6D, 0x64, 0x69, 0x61,
      // mdhd
      0x00, 0x00, 0x00, 0x20,
      0x6D, 0x64, 0x68, 0x64,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x5F, 0x90,
      0x00, 0x00, 0x00, 0x00,
      0x55, 0xC4, 0x00, 0x00,
      // hdlr
      0x00, 0x00, 0x00, 0x33,
      0x68, 0x64, 0x6C, 0x72,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x76, 0x69, 0x64, 0x65,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x4c, 0x75, 0x6d, 0x61, 0x20, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
      0x00,
      // minf
      0x00, 0x00, 0x00, 0xA4,
      0x6D, 0x69, 0x6E, 0x66,
      0x00, 0x00, 0x00, 0x14,
      0x76, 0x6D, 0x68, 0x64,
      0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00 ,0x00, 0x00,
      0x00, 0x00, 0x00, 0x24,
      0x64, 0x69, 0x6E, 0x66,
      0x00, 0x00, 0x00, 0x1C,
      0x64, 0x72, 0x65, 0x66,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x0C,
      0x75, 0x72, 0x6C, 0x20,
      0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x64,
      0x73, 0x74, 0x62, 0x6C,
      0x00, 0x00, 0x00, 0x18,
      0x73, 0x74, 0x73, 0x64,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x00, 0x00, 0x00, 0x10,
      0x73, 0x74, 0x74, 0x73,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x10,
      0x73, 0x74, 0x73, 0x63,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x14,
      0x73, 0x74, 0x73, 0x7A,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x10,
      0x73, 0x74, 0x63, 0x6F,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
    ];
    let mdia = MDIABuilder::create_builder()
      .mdhd(
        MDHDBuilder::create_builder()
        .timescale(90000)
      )
      .hdlr(
        HDLRBuilder::create_builder()
        .handler_type(HandlerType::VIDE)
      )
      .minf(
        MINFBuilder::create_builder()
        .media_header(
          Box::new(VMHDBuilder::create_builder())
        )
        .stbl(
          STBLBuilder::create_builder()
          .stsd(
            STSDBuilder::create_builder()
            // .sample_entry(Box::new(MockHandler{}))
            .sample_entry(vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07])
          )
        )
      )
      .build().unwrap();
    assert_eq!(mdia, expected_mdia);
  }
}