
pub struct FTYPBuilder {}

impl FTYPBuilder {

  pub fn create_builder() -> FTYPBuilder {
    return FTYPBuilder{}
  }

  pub fn build(&self) -> Vec<u8> {
    return vec![
       // size
      0x00, 0x00, 0x00, 0x24,
      // ftyp
      0x66, 0x74, 0x79, 0x70,
      // major_brand
      0x6d, 0x70, 0x34, 0x32,
      // minor_brand
      0x00, 0x00, 0x00, 0x00,
      // compatible_brands
      // [0] mp42
      0x6d, 0x70, 0x34, 0x32,
      // [1] mp41
      0x6d, 0x70, 0x34, 0x31,
      // [2] isom
      0x69, 0x73, 0x6f, 0x6d,
      // [3] avc1
      0x61, 0x76, 0x63, 0x31,
      // [4] iso5
      0x69, 0x73, 0x6f, 0x35
    ];
  }
}

#[cfg(test)]
mod tests {

    use super::*;

  #[test]
  fn test_ftyp_build() {
    let expected_ftyp: [u8; 36] = [
        // size
      0x00, 0x00, 0x00, 0x24,
      // ftyp
      0x66, 0x74, 0x79, 0x70,
      // major_brand
      0x6d, 0x70, 0x34, 0x32,
      // minor_brand
      0x00, 0x00, 0x00, 0x00,
      // compatible_brands
      // [0] mp42
      0x6d, 0x70, 0x34, 0x32,
      // [1] mp41
      0x6d, 0x70, 0x34, 0x31,
      // [2] isom
      0x69, 0x73, 0x6f, 0x6d,
      // [3] avc1
      0x61, 0x76, 0x63, 0x31,
      // [4] iso5
      0x69, 0x73, 0x6f, 0x35
    ];
  
    let ftyp = FTYPBuilder::create_builder().build();
    assert_eq!(ftyp, expected_ftyp);
  }
}